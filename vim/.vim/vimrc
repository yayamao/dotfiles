"==============================================================================
" VundleVim Settings (http://github.com/VundleVim/Vundle.Vim).
"==============================================================================
" VundleVim configuration, make sure it locate at a very top of vimrc.

set nocompatible  " Required.
filetype off      " Required.

" Set the runtime path to include Vundle and initialize.
set rtp+=~/.vim/bundle/Vundle.vim  " Required.
call vundle#begin()                " Required.

" Let Vundle manage Vundle.
Plugin 'VundleVim/Vundle.vim'  " Required.

" Plugins from github (http://vimawesome.com).
Plugin 'tpope/vim-fugitive'
Plugin 'scrooloose/nerdtree'
Plugin 'Xuyuanp/nerdtree-git-plugin'
Plugin 'vim-syntastic/syntastic'
Plugin 'tpope/vim-surround'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'altercation/vim-colors-solarized'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'majutsushi/tagbar'
Plugin 'scrooloose/nerdcommenter'
Plugin 'airblade/vim-gitgutter'
Plugin 'valloric/youcompleteme'
Plugin 'Lokaltog/vim-easymotion'
Plugin 'godlygeek/tabular'
Plugin 'ervandew/supertab'
Plugin 'lervag/vimtex'
Plugin 'plasticboy/vim-markdown'

" Plugins from vim-scripts (http://vim-scripts.org/vim/scripts.html).
Plugin 'L9'        " Required for most plugins from vim-scripts.
Plugin 'genutils'  " Required for most plugins from vim-scripts.
Plugin 'FuzzyFinder'
Plugin 'lookupfile'
" Plugin 'winmanager'
" Plugin 'taglist.vim'
Plugin 'Wombat'

" Plugins from google.
Plugin 'google/vim-maktaba'
Plugin 'google/vim-glaive'
Plugin 'google/vim-codefmt'
Plugin 'google/vim-coverage'
Plugin 'google/vim-selector'
Plugin 'bazelbuild/vim-bazel'

" All of your Plugins must be added before the following line.
call vundle#end()          " Required.
call glaive#Install()      " Required.
filetype plugin indent on  " Required.


"==============================================================================
" Plugin settings.
"==============================================================================

" Plugin 'vim-syntastic/syntastic' settings:
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_error_symbol = "✘"
let g:syntastic_warning_symbol = "▲"
let g:syntastic_c_compiler = 'clang'
let g:syntastic_cpp_compiler = 'clang++'
let g:syntastic_cpp_compiler_options = '-std=c++14'
let g:syntastic_python_checkers = ['pyflakes']

" Plugin 'scrooloose/nerdtree' settings:
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
autocmd bufenter *
      \ if (winnr("$") == 1 && exists("b:NERDTreeType") &&
      \     b:NERDTreeType == "primary") |
      \   q |
      \ endif
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
let g:NERDTreeWinSize = 30
nnoremap <silent> ,t :TagbarClose<CR> :NERDTreeToggle<Enter>
" nnoremap <silent> ,tf :NERDTreeFind<CR>

" Plugin 'ctrlpvim/ctrlp.vim' setttings:
let g:ctrlp_extensions = ['tag']

" Plugin 'vim-airline/vim-airline' settings:
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 0

" Plugin 'majutsushi/tagbar' settings:
let g:tagbar_left = 1
let g:tagbar_width = 30
nnoremap <silent> ,b :NERDTreeClose<CR> :TagbarToggle<CR>

" This tests if vim was configured with the '--enable-cscope' option.
" If it wasn't, time to recompile vim...
if has("cscope")
  """"""""""""" Standard cscope/vim boilerplate

  " look for tags file everywhere starting from the current directory up to the root.
  set tags=tags;/

  " use both cscope and ctag for 'ctrl-]', ':ta', and 'vim -t'
  set cscopetag

  " check cscope for definition of a symbol before checking ctags: set to 1
  " if you want the reverse search order.
  set csto=0

  " add any cscope database in current directory
  if filereadable("cscope.out")
    cs add cscope.out
    " else add the database pointed to by environment variable
  elseif $CSCOPE_DB != ""
    cs add $CSCOPE_DB
  endif

  " show msg when any other cscope db added
  set cscopeverbose

  " show results in quickfix window.
	set cscopequickfix=s-,c-,d-,i-,t-,e-,a-

  " Sorted according `help cs-find`
  nmap ,css :cs find s <C-R>=expand("<cword>")<CR><CR>  " Find this C symbol.
  nmap ,csg :cs find g <C-R>=expand("<cword>")<CR><CR>  " Find this definition.
  nmap ,csd :cs find d <C-R>=expand("<cword>")<CR><CR>  " Find functions called by this function.
  nmap ,csc :cs find c <C-R>=expand("<cword>")<CR><CR>  " Find functions calling this function.
  nmap ,cst :cs find t <C-R>=expand("<cword>")<CR><CR>  " Find this text string.
  nmap ,cse :cs find e <C-R>=expand("<cword>")<CR><CR>  " Find this egrep pattern.
  nmap ,csf :cs find f <C-R>=expand("<cword>")<CR><CR>  " Find this file.
  nmap ,csi :cs find i <C-R>=expand("<cword>")<CR><CR>  " Find this files #including this file.
  nmap ,csa :cs find a <C-R>=expand("<cword>")<CR><CR>  " Find assignments to this symbol.

endif

" Plugin 'valloric/youcompleteme' settings:
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_always_populate_location_list = 1
nmap ,cs :YcmCompleter GoTo<CR>
function! s:CustomizeYcmQuickFixWindow()
  wincmd K   " Move the window to the top of the screen.
  5wincmd _  " Set the window height to 5.
endfunction
autocmd User YcmQuickFixOpened call s:CustomizeYcmQuickFixWindow()

" Plugin 'lookupfile' settings:
" Lookup loaded files (buffers) using |bufname()|.
nnoremap ,z :LUBufs <CR>

" Plugin 'lervag/vimtex' settings:
let g:vimtex_view_method = 'zathura'

" Plugin 'Wombat' settings:
colorscheme wombat

" Plugin 'google/vim-codefmt' settings:
Glaive codefmt clang_format_executable="clang-format"
map <C-K> :FormatLines<CR>
imap <C-K> <ESC>:FormatLines<CR>i


"==============================================================================
" Basic Settings.
"==============================================================================

" Use Vim settings, rather then Vi settings (much better!).
set nocompatible

" Enable syntax highlighting by default.
syntax on

" Make Vim jump to the last position when reopening a file.
au BufReadPost *
      \ if line("'\"") > 1 && line("'\"") <= line("$") |
      \   exe "normal! g'\"" |
      \ endif

" Load indentation rules and plugins according to the detected filetype.
filetype plugin indent on

" Make VIM to behave a lot differently from regular Vi.
set showcmd     " Show (partial) command in status line.
set showmatch   " Show matching brackets.
set ignorecase  " Do case insensitive matching.
set smartcase   " Do smart case matching.
set incsearch   " Incremental search.
set autowrite   " Automatically save before commands like :next and :make.
set hidden      " Hide buffers when they are abandoned.
set mouse=a     " Enable mouse usage (all modes).


"==============================================================================
" Personal Settings.
"==============================================================================

set nu
set cursorline
set ruler         " Always show current position.
set showmode      " Show current mode down the bottom.
set autoread      " Auto reload file when modify outside.
set hlsearch
set laststatus=2  " Always display the status line.

" Display tabs and trailing spaces.
" set list
" set listchars=tab:>>,extends:>,precedes:<,trail:,nbsp:_,eol:$
match Todo /\s\+$/  " Auto highlight trailing spaces.

" Indent settings (Google style).
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab
%retab
" set autoindent
" set smartindent

" Encoding settings.
" Use UTF-8 as default encoding, also make Vim can automatically recognise other
" encoding types. This won't change file's encoding type, e.g. Assuming there is
" a GBK file, it will be opend as a UTF-8 file, but still persist as a GBK file
" even you modify the file.
" To change a file encoding type permanently, use command :set fenc=utf-8.
set encoding=utf-8
set fencs=utf-8,gbk,ucs-bom,gb18030,gb2312,cp936
" set ambiwidth=double

" Avoid ^M line break.
set fileformats=unix,mac,dos

" Code column limit settings.
set cc=100
hi ColorColumn ctermbg=red

" Set working directory to the current file.
nnoremap ,cd :cd %:p:h<CR>:pwd<CR>
" set autochdir

" Use 256 colors in console mode if we think the terminal supports it.
set t_Co=256


"==============================================================================
" GUI Settings.
"==============================================================================

if has('gui_running')
  source $VIMRUNTIME/mswin.vim

  set guioptions-=m  " Remove menu bar.
  set guioptions-=T  " Remove toolbar.
  set guioptions-=r  " Remove right-hand scroll bar.
  set guioptions-=L  " Remove left-hand scroll bar.
  set guioptions-=b  " Remove bottom scroll bar.

  " Set font
  let g:airline_powerline_fonts = 0
  if has('unix')
    if has('mac')  " OS X
      set guifont=Monaco:h11
    else
      set guifont=Monaco\ 11
      " set guifont=DejaVu\ Sans\ Mono\ for\ Powerline\ 11
    endif
    set lines=999 columns=999  " Maximize gvim window.
  elseif has('win32') || has('win64')
    set guifont=Consolas:h11:cDEFAULT
    autocmd GUIEnter * simalt ~x  " Fullscreen.
    map <F11> :call libcallnr("gvimfullscreen.dll", "ToggleFullScreen", 0)<CR>
  endif

  " set background=light
else
  " set background=dark
endif

